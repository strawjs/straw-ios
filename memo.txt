


plugin -> service


straw-ios-http-service
straw-ios-http-service.js

/**
 * STWServiceCall is the model class of the Service call from Browser.
 *
 * @layer Domain
 */
@interface STWServiceCall : NSObject

@property (nonatomic, retain) NSNumber *callId;
@property (nonatomic, retain) NSString *service;
@property (nonatomic, retain) NSString *method;
@property (nonatomic, retain) BOOL *success;

- (void)succeed;
- (void)succeedWithString:(NSString *)value;
- (void)succeedWithNumber:(NSNumber *)value;
- (void)succeedWithJSON:(JSONObject *)value;

- (void)failWithCode:(NSNumber *)code withMessage:(NSString *)message;


@end


/**
 *
 */
@interface STWServiceCallContext : NSObject
@end

/**
 * STWCallFactory is the factory class of STWCall objects.
 */
@interface STWServiceCallFactory : NSObject
+ (STWServiceCall *)createFromJSON:(JSONObject *)json;
@end

/**
 * STWService is
 */
@protocol STWService: NSObject

@property (nonatomic, assign, readonly) UIViewController *viewController
@property (nonatomic, assign, readonly) UIWebView *webView;

- actionCall:(STWCall *)call;

@end

/**
 STWServiceRepository is the repository class of STWServices.
 */
@interface STWServiceRepository : NSObject

@property (nonatomic, retain, readonly)
@end


/**
 *
 */
@interface ExampleService : StrawService
- (void)action:(JSONObject *)arg;
@end

@implementation ExampleService
- (void)action:(JSONObject *)arg withCall:(StrawCall *)call {
    if ([self blah]) {
        [call succeedWith:obj];
    } else {
        [call failWithCode:123 withMessage:@"example failed!"];
    }
}
@end



A service can be either stateful or stateless.
That's why the naming of `Straw Service Method`.
Reusable services should be most likely stateless.
Application specific services can be stateful.


Service -
Service Method - single functionality of service
Service Method Call

[END]
