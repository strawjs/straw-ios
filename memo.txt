
あなたといたら いつまでも
心の波が 揺れ動く
歴史に残る 歌詠みに
なれる気にすら なれるほど
#shichigo


plugin -> service


straw-ios-http-service
straw-ios-http-service.js

/**
 * STWServiceCall is the model class of the Service Method call from Browser.
 *
 * @layer Domain
 */
@interface STWServiceCall : NSObject

@property (nonatomic, retain) NSNumber *callId;
@property (nonatomic, retain) NSString *service;
@property (nonatomic, retain) NSString *method;
@property (nonatomic, retain) BOOL *success;

@end



/**
 * STWServiceCallFactory is the factory class of STWServiceCall objects.
 *
 * @layer Domain
 */
@interface STWServiceCallFactory : NSObject
+ (STWServiceCall *)createFromJSON:(JSONObject *)json;
@end

/**
 * STWService is the protocol conformed by Straw Service implementations.
 *
 * @layer Domain
 */
@protocol STWService <NSObject>

- actionCall:(STWCall *)call;

@end

/**
 * STWServiceCallContext is a context of a single Service Method call.
 * Service authers can succeed or fail Service Method Call using this class.
 *
 * @layer Application
 */
@protocol STWServiceCallContext <NSObject>

@property (nonatomic, assign, readonly) UIViewController *viewController
@property (nonatomic, assign, readonly) UIWebView *webView;
@property (nonatomic, retain, readonly) STWServiceCall *call;

- (void)succeed;
- (void)succeedWithString:(NSString *)value;
- (void)succeedWithNumber:(NSNumber *)value;
- (void)succeedWithJSON:(JSONObject *)value;

- (void)failWithCode:(NSNumber *)code withMessage:(NSString *)message;

@end

/**
 * STWServiceRepository is the repository class of id <STWService>.
 *
 * @layer Domain
 */
@interface STWServiceRepository : NSObject

@property (nonatomic, retain, readonly)
@end


/**
 * ExampleService is a example of Service implementation
 *
 * @layer Service
 */
@interface ExampleService <StrawService> : NSObject
- (void)action:(JSONObject *)params withContext:(STWServiceContext *)context;
@end

@implementation ExampleService
- (void)action:(JSONObject *)arg withContext:(STWServiceCallContext *)context {
    if ([self blah]) {
        [context succeed];

    } else if ([self blahblah]) {
        [context succeedWithObject:@{@"a": @123}];

    } else {
        [call failWithCode:@123 withMessage:@"example failed!"];
    }
}
@end


- (void)callService:(id <STWService>)service withContext(id <STWServiceCallContext>)context
{
    STWServiceCall *call = context.serviceCall;

    // Service Method must have the form of
    // `- (void)methodName:(NSDcitionary *)params withCall:(id <STWServiceCallContext>)`
    NSString *methodName = [NSString stringWithFormat:@"%@:withContext:", call.method];

    // create the selector for Service Method
    SEL selector = NSSelectorFromString(methodName);

    if ([service respondsToSelector:selector]) {

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"

        // invoke Service Method
        [service performSelector:selector withObject:call.params withObject:context];

#pragma clang diagnostic pop

    } else {
        // TODO: log error
    }
}

@interface STWNativeWebViewBridge : NSObject

+ (NSString *)createNativeToBrowserMessage:(NSDictionary *)params;
+ (NSString *)retrieveRequestObjectForCallId:(NSString *)callId;

@end

A service can be either stateful or stateless.
That's why the naming of `Straw Service Method`.
Reusable services should be most likely stateless.
Application specific services can be stateful.


Service - a bundle of series of functions.
Service Method - a functionality of a service.
Service Call - a call of Service Method.
Service Call Context - a context of a call of Service Method

Service Repository - repository of services
Service Call Factory - factory of service call object

----

The Domain Services should never touch the Application layer.

Do people really want stateful services?

How about to use Domain Events? - Bad idea

----

TODO:
- define interfaces
- tests
  - mock and stub
- log
  - log class
  - support log levels
    - verbose
    - debug
    - info
    - warn
    - error
- .podspec


[END]
